// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['app/polylines'], function(polylines) {
    var MotoMap, mouseX, mouseY, showBusy, showError;
    showBusy = function(x) {
      if (x) {
        return $('#busy').show();
      } else {
        return $('#busy').hide();
      }
    };
    showError = function(x) {
      if (x) {
        return $('#error').show();
      } else {
        return $('#error').hide();
      }
    };
    mouseX = null;
    mouseY = null;
    document.onmousemove = function(e) {
      mouseX = e.clientX;
      return mouseY = e.clientY;
    };
    return MotoMap = (function() {

      MotoMap.prototype.roadmapPolygonOpts = {
        strokeWeight: 1,
        strokeColor: '#000000',
        fillColor: '#000000',
        fillOpacity: 0.2
      };

      MotoMap.prototype.satellitePolygonOpts = {
        strokeWeight: 1,
        strokeColor: '#ffffff',
        fillColor: '#ffffff',
        fillOpacity: 0.3
      };

      MotoMap.prototype.hoverPolygonOpts = {
        strokeWeight: 0.6,
        fillColor: '#ffd700',
        fillOpacity: 0.5
      };

      function MotoMap(domId) {
        this.download = __bind(this.download, this);

        this.createMarker = __bind(this.createMarker, this);

        this.onMapTypeChange = __bind(this.onMapTypeChange, this);

        this.onIdle = __bind(this.onIdle, this);

        var opts;
        opts = {
          zoom: 8,
          center: new google.maps.LatLng(37, -122),
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        this.currentPolygonOpts = this.roadmapPolygonOpts;
        this.map = new google.maps.Map(document.getElementById(domId), opts);
        this.markers = {};
        this.placeName = $('#placeName');
        google.maps.event.addListener(this.map, 'idle', this.onIdle);
        google.maps.event.addListener(this.map, 'maptypeid_changed', this.onMapTypeChange);
        $(document).ajaxError(function() {
          showBusy(false);
          return showError(true);
        });
      }

      MotoMap.prototype.onIdle = function() {
        var bounds, ne, sw,
          _this = this;
        showError(false);
        showBusy(true);
        bounds = this.map.getBounds();
        sw = bounds.getSouthWest();
        ne = bounds.getNorthEast();
        return $.get('/places', {
          swLat: sw.lat(),
          swLng: sw.lng(),
          neLat: ne.lat(),
          neLng: ne.lng()
        }, function(data) {
          var id, marker, placemark, _i, _len, _ref;
          _ref = _this.markers;
          for (id in _ref) {
            marker = _ref[id];
            marker.setMap(null);
          }
          _this.markers = {};
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            placemark = data[_i];
            _this.createMarker(placemark);
          }
          return showBusy(false);
        });
      };

      MotoMap.prototype.onMapTypeChange = function() {
        var id, marker, _ref, _results;
        switch (this.map.getMapTypeId()) {
          case google.maps.MapTypeId.ROADMAP:
          case google.maps.MapTypeId.TERRAIN:
            this.currentPolygonOpts = this.roadmapPolygonOpts;
            break;
          default:
            this.currentPolygonOpts = this.satellitePolygonOpts;
        }
        _ref = this.markers;
        _results = [];
        for (id in _ref) {
          marker = _ref[id];
          _results.push(marker.setOptions(this.currentPolygonOpts));
        }
        return _results;
      };

      MotoMap.prototype.createMarker = function(placemark) {
        var poly,
          _this = this;
        poly = new google.maps.Polygon(this.currentPolygonOpts);
        poly.setPath(polylines.decode(placemark.polygon));
        poly.setMap(this.map);
        this.markers[placemark.id] = poly;
        google.maps.event.addListener(poly, 'mouseover', function() {
          poly.setOptions(_this.hoverPolygonOpts);
          _this.placeName.text(placemark.name);
          return _this.placeName.show();
        });
        google.maps.event.addListener(poly, 'mousemove', function() {
          _this.placeName.css('left', mouseX);
          return _this.placeName.css('top', mouseY);
        });
        return google.maps.event.addListener(poly, 'mouseout', function() {
          poly.setOptions(_this.currentPolygonOpts);
          return _this.placeName.hide();
        });
      };

      MotoMap.prototype.download = function() {
        var bounds, iframe, ne, sw, url;
        bounds = this.map.getBounds();
        sw = bounds.getSouthWest();
        ne = bounds.getNorthEast();
        url = '/download/poi.csv?swLat=' + sw.lat() + '&swLng=' + sw.lng() + '&neLat=' + ne.lat() + '&neLng=' + ne.lng();
        iframe = document.getElementById('downloader');
        if (iframe === null) {
          iframe = document.createElement('iframe');
          iframe.id = 'downloader';
          iframe.style.display = 'none';
          document.body.appendChild(iframe);
        }
        return iframe.src = url;
      };

      return MotoMap;

    })();
  });

}).call(this);
